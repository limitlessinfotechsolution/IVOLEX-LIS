{"version":3,"file":"AdminAuthContext-CNzwcfZy.js","sources":["../../src/contexts/AdminAuthContext.jsx"],"sourcesContent":["import { createContext, useContext, useState, useEffect } from 'react'\nimport { useAuth } from './AuthContext.jsx'\n\n// Try to import Supabase, but handle errors gracefully\nimport { supabase as supabaseClient } from '../config/supabase.js'\n\nconst AdminAuthContext = createContext()\n\nexport const useAdminAuth = () => {\n  const context = useContext(AdminAuthContext)\n  if (!context) {\n    throw new Error('useAdminAuth must be used within an AdminAuthProvider')\n  }\n  return context\n}\n\nexport const AdminAuthProvider = ({ children }) => {\n  const { user, isAuthenticated } = useAuth()\n  const [isAdminAuthenticated, setIsAdminAuthenticated] = useState(false)\n  const [isAdminLoading, setIsAdminLoading] = useState(true)\n  const [adminUser, setAdminUser] = useState(null)\n\n  // Check admin authentication status\n  useEffect(() => {\n    const checkAdminAuth = async () => {\n      setIsAdminLoading(true)\n\n      // If user is not authenticated at all, they can't be admin\n      if (!isAuthenticated || !user) {\n        setIsAdminAuthenticated(false)\n        setAdminUser(null)\n        setIsAdminLoading(false)\n        return\n      }\n\n      // Check if user has admin role in Supabase\n      try {\n        if (supabaseClient) {\n          // Check user role in database\n          const { data, error } = await supabaseClient\n            .from('users')\n            .select('role, is_admin, is_super_admin')\n            .eq('id', user.id)\n            .single()\n\n          if (error) {\n            console.error('Error fetching user role:', error)\n            // Fallback to local check for demo purposes\n            const isAdmin = user.role === 'admin' || user.role === 'super_admin'\n            setIsAdminAuthenticated(isAdmin)\n            setAdminUser(isAdmin ? user : null)\n          } else if (data) {\n            const isAdmin =\n              data.is_admin ||\n              data.is_super_admin ||\n              data.role === 'admin' ||\n              data.role === 'super_admin'\n            setIsAdminAuthenticated(isAdmin)\n            setAdminUser(isAdmin ? { ...user, ...data } : null)\n          } else {\n            setIsAdminAuthenticated(false)\n            setAdminUser(null)\n          }\n        } else {\n          // Fallback to local check when Supabase is not configured\n          const isAdmin = user.role === 'admin' || user.role === 'super_admin'\n          setIsAdminAuthenticated(isAdmin)\n          setAdminUser(isAdmin ? user : null)\n        }\n      } catch (error) {\n        console.error('Error checking admin auth:', error)\n        // Fallback to local check\n        const isAdmin = user.role === 'admin' || user.role === 'super_admin'\n        setIsAdminAuthenticated(isAdmin)\n        setAdminUser(isAdmin ? user : null)\n      } finally {\n        setIsAdminLoading(false)\n      }\n    }\n\n    checkAdminAuth()\n  }, [user, isAuthenticated])\n\n  const value = {\n    isAdminAuthenticated,\n    isAdminLoading,\n    adminUser,\n  }\n\n  return (\n    <AdminAuthContext.Provider value={value}>\n      {children}\n    </AdminAuthContext.Provider>\n  )\n}\n"],"names":["AdminAuthContext","createContext","useAdminAuth","context","useContext","Error"],"mappings":"8FAMA,MAAMA,EAAmBC,EAAAA,gBAEZC,EAAe,KAC1B,MAAMC,EAAUC,EAAAA,WAAWJ,GAC3B,IAAKG,EACH,MAAM,IAAIE,MAAM,yDAElB,OAAOF"}